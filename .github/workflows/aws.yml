name: Deploy Medusa Store to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent workflow from running indefinitely

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image to ECR
        run: |
          IMAGE_URI=551140580894.dkr.ecr.us-east-1.amazonaws.com/my-repo:latest
          echo "üî® Building Docker image..."
          docker build -t $IMAGE_URI .
          echo "üì§ Pushing image to ECR..."
          docker push $IMAGE_URI
          echo "‚úÖ Image pushed successfully: $IMAGE_URI"

      - name: Update ECS task definition
        id: update-task-def
        run: |
          IMAGE="551140580894.dkr.ecr.us-east-1.amazonaws.com/my-repo:latest"
          echo "üìã Fetching current task definition..."
          
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition medusa-task \
            --region us-east-1)

          echo "üîÑ Updating task definition with new image..."
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq \
            --arg IMAGE "$IMAGE" \
            '.taskDefinition |
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

          echo "üìù Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --region us-east-1 \
            --cli-input-json "$NEW_TASK_DEF" \
            | jq -r '.taskDefinition.taskDefinitionArn')

          echo "‚úÖ New task definition registered: $NEW_TASK_DEF_ARN"
          echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          echo "üöÄ Updating ECS service with new task definition..."
          aws ecs update-service \
            --cluster medusa-ecs-cluster \
            --service medusa-service \
            --task-definition ${{ steps.update-task-def.outputs.task_definition_arn }} \
            --force-new-deployment \
            --region us-east-1
          echo "‚úÖ ECS service update initiated"

      - name: Wait for ECS service to stabilize with enhanced monitoring
        timeout-minutes: 20
        run: |
          echo "üîç Monitoring ECS deployment progress..."
          
          # Function to get service status
          get_service_status() {
            aws ecs describe-services \
              --cluster medusa-ecs-cluster \
              --services medusa-service \
              --region us-east-1 \
              --query 'services[0]' \
              --output json
          }
          
          # Function to get running task count
          get_task_counts() {
            get_service_status | jq -r '.runningCount, .desiredCount, .deployments[0].status'
          }
          
          # Function to check for failed tasks and get their details
          check_failed_tasks() {
            echo "üîç Checking for failed tasks..."
            
            FAILED_TASKS=$(aws ecs list-tasks \
              --cluster medusa-ecs-cluster \
              --service medusa-service \
              --desired-status STOPPED \
              --region us-east-1 \
              --query 'taskArns[0:3]' \
              --output text)
            
            if [ "$FAILED_TASKS" != "None" ] && [ -n "$FAILED_TASKS" ]; then
              echo "‚ö†Ô∏è Found recently failed tasks. Getting details..."
              
              for task in $FAILED_TASKS; do
                if [ "$task" != "None" ]; then
                  echo "üìã Task: $task"
                  aws ecs describe-tasks \
                    --cluster medusa-ecs-cluster \
                    --tasks "$task" \
                    --region us-east-1 \
                    --query 'tasks[0].{StoppedReason:stoppedReason,LastStatus:lastStatus,Containers:containers[0].{Name:name,ExitCode:exitCode,Reason:reason}}' \
                    --output table
                fi
              done
            fi
          }
          
          # Main monitoring loop
          for i in {1..40}; do  # Check for 20 minutes (40 √ó 30 seconds)
            echo "üìä Deployment check $i/40..."
            
            # Get current status
            read RUNNING_COUNT DESIRED_COUNT DEPLOYMENT_STATUS <<< $(get_task_counts)
            
            echo "   Running: $RUNNING_COUNT/$DESIRED_COUNT | Deployment: $DEPLOYMENT_STATUS"
            
            # Check if deployment is successful
            if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt 0 ] && [ "$DEPLOYMENT_STATUS" = "PRIMARY" ]; then
              echo "üéâ Deployment successful! Service is stable."
              
              # Show final service status
              echo "üìã Final service status:"
              get_service_status | jq '.serviceName, .status, .deployments[0] | {status, runningCount, desiredCount, createdAt}'
              exit 0
            fi
            
            # Check for issues every 5th attempt
            if [ $((i % 5)) -eq 0 ]; then
              check_failed_tasks
              
              # Show current service events (last 5)
              echo "üìù Recent service events:"
              get_service_status | jq -r '.events[0:5][] | "\(.createdAt) - \(.message)"'
            fi
            
            sleep 30
          done
          
          # If we get here, deployment failed
          echo "‚ùå Deployment failed to stabilize within 20 minutes"
          echo ""
          echo "üìã Final service status:"
          get_service_status | jq '{serviceName, status, runningCount, desiredCount, deployments: .deployments[0:2]}'
          
          echo ""
          echo "üìù Service events (last 10):"
          get_service_status | jq -r '.events[0:10][] | "\(.createdAt) - \(.message)"'
          
          echo ""
          check_failed_tasks
          
          # Try to get logs from CloudWatch if possible
          echo "üìã Attempting to get recent container logs..."
          TASK_ARN=$(aws ecs list-tasks \
            --cluster medusa-ecs-cluster \
            --service medusa-service \
            --region us-east-1 \
            --query 'taskArns[0]' \
            --output text)
            
          if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
            TASK_ID=$(echo "$TASK_ARN" | cut -d'/' -f3)
            echo "üîç Checking logs for task: $TASK_ID"
            
            # Try to get recent logs (this might fail if log group doesn't exist)
            aws logs get-log-events \
              --log-group-name /ecs/medusa-task \
              --log-stream-name "ecs/medusa/$TASK_ID" \
              --region us-east-1 \
              --start-time $(date -d '10 minutes ago' +%s)000 \
              --query 'events[-20:].message' \
              --output text 2>/dev/null || echo "‚ùå Could not retrieve container logs"
          fi
          
          exit 1
